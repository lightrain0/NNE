// Generated by gencpp from file monstertruck_msgs/SetAlternativeToleranceRequest.msg
// DO NOT EDIT!


#ifndef MONSTERTRUCK_MSGS_MESSAGE_SETALTERNATIVETOLERANCEREQUEST_H
#define MONSTERTRUCK_MSGS_MESSAGE_SETALTERNATIVETOLERANCEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <actionlib_msgs/GoalID.h>

namespace monstertruck_msgs
{
template <class ContainerAllocator>
struct SetAlternativeToleranceRequest_
{
  typedef SetAlternativeToleranceRequest_<ContainerAllocator> Type;

  SetAlternativeToleranceRequest_()
    : goalID()
    , linearTolerance(0.0)
    , angularTolerance(0.0)  {
    }
  SetAlternativeToleranceRequest_(const ContainerAllocator& _alloc)
    : goalID(_alloc)
    , linearTolerance(0.0)
    , angularTolerance(0.0)  {
  (void)_alloc;
    }



   typedef  ::actionlib_msgs::GoalID_<ContainerAllocator>  _goalID_type;
  _goalID_type goalID;

   typedef double _linearTolerance_type;
  _linearTolerance_type linearTolerance;

   typedef double _angularTolerance_type;
  _angularTolerance_type angularTolerance;




  typedef boost::shared_ptr< ::monstertruck_msgs::SetAlternativeToleranceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::monstertruck_msgs::SetAlternativeToleranceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetAlternativeToleranceRequest_

typedef ::monstertruck_msgs::SetAlternativeToleranceRequest_<std::allocator<void> > SetAlternativeToleranceRequest;

typedef boost::shared_ptr< ::monstertruck_msgs::SetAlternativeToleranceRequest > SetAlternativeToleranceRequestPtr;
typedef boost::shared_ptr< ::monstertruck_msgs::SetAlternativeToleranceRequest const> SetAlternativeToleranceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::monstertruck_msgs::SetAlternativeToleranceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::monstertruck_msgs::SetAlternativeToleranceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace monstertruck_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'monstertruck_msgs': ['/home/evan/share/coverage_path_ws/src/monstertruck_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::monstertruck_msgs::SetAlternativeToleranceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::monstertruck_msgs::SetAlternativeToleranceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::monstertruck_msgs::SetAlternativeToleranceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::monstertruck_msgs::SetAlternativeToleranceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::monstertruck_msgs::SetAlternativeToleranceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::monstertruck_msgs::SetAlternativeToleranceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::monstertruck_msgs::SetAlternativeToleranceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9332f7ba5e819792f5504c48f062b9f5";
  }

  static const char* value(const ::monstertruck_msgs::SetAlternativeToleranceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9332f7ba5e819792ULL;
  static const uint64_t static_value2 = 0xf5504c48f062b9f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::monstertruck_msgs::SetAlternativeToleranceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "monstertruck_msgs/SetAlternativeToleranceRequest";
  }

  static const char* value(const ::monstertruck_msgs::SetAlternativeToleranceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::monstertruck_msgs::SetAlternativeToleranceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "actionlib_msgs/GoalID goalID\n\
float64 linearTolerance\n\
float64 angularTolerance\n\
\n\
================================================================================\n\
MSG: actionlib_msgs/GoalID\n\
# The stamp should store the time at which this goal was requested.\n\
# It is used by an action server when it tries to preempt all\n\
# goals that were requested before a certain time\n\
time stamp\n\
\n\
# The id provides a way to associate feedback and\n\
# result message with specific goal requests. The id\n\
# specified must be unique.\n\
string id\n\
\n\
";
  }

  static const char* value(const ::monstertruck_msgs::SetAlternativeToleranceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::monstertruck_msgs::SetAlternativeToleranceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goalID);
      stream.next(m.linearTolerance);
      stream.next(m.angularTolerance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetAlternativeToleranceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::monstertruck_msgs::SetAlternativeToleranceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::monstertruck_msgs::SetAlternativeToleranceRequest_<ContainerAllocator>& v)
  {
    s << indent << "goalID: ";
    s << std::endl;
    Printer< ::actionlib_msgs::GoalID_<ContainerAllocator> >::stream(s, indent + "  ", v.goalID);
    s << indent << "linearTolerance: ";
    Printer<double>::stream(s, indent + "  ", v.linearTolerance);
    s << indent << "angularTolerance: ";
    Printer<double>::stream(s, indent + "  ", v.angularTolerance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MONSTERTRUCK_MSGS_MESSAGE_SETALTERNATIVETOLERANCEREQUEST_H
