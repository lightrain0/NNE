// Generated by gencpp from file monstertruck_msgs/Pdout.msg
// DO NOT EDIT!


#ifndef MONSTERTRUCK_MSGS_MESSAGE_PDOUT_H
#define MONSTERTRUCK_MSGS_MESSAGE_PDOUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace monstertruck_msgs
{
template <class ContainerAllocator>
struct Pdout_
{
  typedef Pdout_<ContainerAllocator> Type;

  Pdout_()
    : header()
    , approaching_goal_point(false)
    , dt(0.0)
    , e_position(0.0)
    , de_position_dt(0.0)
    , e_angle(0.0)
    , de_angle_dt(0.0)
    , speed(0.0)
    , speed_real(0.0)
    , z_twist(0.0)
    , z_twist_real(0.0)
    , z_twist_deg(0.0)
    , z_twist_deg_real(0.0)  {
    }
  Pdout_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , approaching_goal_point(false)
    , dt(0.0)
    , e_position(0.0)
    , de_position_dt(0.0)
    , e_angle(0.0)
    , de_angle_dt(0.0)
    , speed(0.0)
    , speed_real(0.0)
    , z_twist(0.0)
    , z_twist_real(0.0)
    , z_twist_deg(0.0)
    , z_twist_deg_real(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _approaching_goal_point_type;
  _approaching_goal_point_type approaching_goal_point;

   typedef float _dt_type;
  _dt_type dt;

   typedef float _e_position_type;
  _e_position_type e_position;

   typedef float _de_position_dt_type;
  _de_position_dt_type de_position_dt;

   typedef float _e_angle_type;
  _e_angle_type e_angle;

   typedef float _de_angle_dt_type;
  _de_angle_dt_type de_angle_dt;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _speed_real_type;
  _speed_real_type speed_real;

   typedef float _z_twist_type;
  _z_twist_type z_twist;

   typedef float _z_twist_real_type;
  _z_twist_real_type z_twist_real;

   typedef float _z_twist_deg_type;
  _z_twist_deg_type z_twist_deg;

   typedef float _z_twist_deg_real_type;
  _z_twist_deg_real_type z_twist_deg_real;




  typedef boost::shared_ptr< ::monstertruck_msgs::Pdout_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::monstertruck_msgs::Pdout_<ContainerAllocator> const> ConstPtr;

}; // struct Pdout_

typedef ::monstertruck_msgs::Pdout_<std::allocator<void> > Pdout;

typedef boost::shared_ptr< ::monstertruck_msgs::Pdout > PdoutPtr;
typedef boost::shared_ptr< ::monstertruck_msgs::Pdout const> PdoutConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::monstertruck_msgs::Pdout_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::monstertruck_msgs::Pdout_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace monstertruck_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'monstertruck_msgs': ['/home/evan/share/coverage_path_ws/src/monstertruck_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::monstertruck_msgs::Pdout_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::monstertruck_msgs::Pdout_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::monstertruck_msgs::Pdout_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::monstertruck_msgs::Pdout_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::monstertruck_msgs::Pdout_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::monstertruck_msgs::Pdout_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::monstertruck_msgs::Pdout_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fffcd293bef6bed7b184d4f3834f37f4";
  }

  static const char* value(const ::monstertruck_msgs::Pdout_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfffcd293bef6bed7ULL;
  static const uint64_t static_value2 = 0xb184d4f3834f37f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::monstertruck_msgs::Pdout_<ContainerAllocator> >
{
  static const char* value()
  {
    return "monstertruck_msgs/Pdout";
  }

  static const char* value(const ::monstertruck_msgs::Pdout_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::monstertruck_msgs::Pdout_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
bool approaching_goal_point\n\
float32 dt\n\
float32 e_position\n\
float32 de_position_dt\n\
float32 e_angle\n\
float32 de_angle_dt\n\
float32 speed\n\
float32 speed_real\n\
float32 z_twist\n\
float32 z_twist_real\n\
float32 z_twist_deg\n\
float32 z_twist_deg_real\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::monstertruck_msgs::Pdout_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::monstertruck_msgs::Pdout_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.approaching_goal_point);
      stream.next(m.dt);
      stream.next(m.e_position);
      stream.next(m.de_position_dt);
      stream.next(m.e_angle);
      stream.next(m.de_angle_dt);
      stream.next(m.speed);
      stream.next(m.speed_real);
      stream.next(m.z_twist);
      stream.next(m.z_twist_real);
      stream.next(m.z_twist_deg);
      stream.next(m.z_twist_deg_real);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pdout_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::monstertruck_msgs::Pdout_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::monstertruck_msgs::Pdout_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "approaching_goal_point: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.approaching_goal_point);
    s << indent << "dt: ";
    Printer<float>::stream(s, indent + "  ", v.dt);
    s << indent << "e_position: ";
    Printer<float>::stream(s, indent + "  ", v.e_position);
    s << indent << "de_position_dt: ";
    Printer<float>::stream(s, indent + "  ", v.de_position_dt);
    s << indent << "e_angle: ";
    Printer<float>::stream(s, indent + "  ", v.e_angle);
    s << indent << "de_angle_dt: ";
    Printer<float>::stream(s, indent + "  ", v.de_angle_dt);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "speed_real: ";
    Printer<float>::stream(s, indent + "  ", v.speed_real);
    s << indent << "z_twist: ";
    Printer<float>::stream(s, indent + "  ", v.z_twist);
    s << indent << "z_twist_real: ";
    Printer<float>::stream(s, indent + "  ", v.z_twist_real);
    s << indent << "z_twist_deg: ";
    Printer<float>::stream(s, indent + "  ", v.z_twist_deg);
    s << indent << "z_twist_deg_real: ";
    Printer<float>::stream(s, indent + "  ", v.z_twist_deg_real);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MONSTERTRUCK_MSGS_MESSAGE_PDOUT_H
