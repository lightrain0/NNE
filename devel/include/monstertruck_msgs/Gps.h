// Generated by gencpp from file monstertruck_msgs/Gps.msg
// DO NOT EDIT!


#ifndef MONSTERTRUCK_MSGS_MESSAGE_GPS_H
#define MONSTERTRUCK_MSGS_MESSAGE_GPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace monstertruck_msgs
{
template <class ContainerAllocator>
struct Gps_
{
  typedef Gps_<ContainerAllocator> Type;

  Gps_()
    : header()
    , utc(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , v_n(0.0)
    , v_e(0.0)
    , v_d(0.0)
    , truecourse(0.0)
    , groundspeed(0.0)
    , signalquality(0)
    , numberofsatellites(0)
    , pdop(0.0)  {
    }
  Gps_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , utc(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , v_n(0.0)
    , v_e(0.0)
    , v_d(0.0)
    , truecourse(0.0)
    , groundspeed(0.0)
    , signalquality(0)
    , numberofsatellites(0)
    , pdop(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _utc_type;
  _utc_type utc;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef float _altitude_type;
  _altitude_type altitude;

   typedef float _v_n_type;
  _v_n_type v_n;

   typedef float _v_e_type;
  _v_e_type v_e;

   typedef float _v_d_type;
  _v_d_type v_d;

   typedef float _truecourse_type;
  _truecourse_type truecourse;

   typedef float _groundspeed_type;
  _groundspeed_type groundspeed;

   typedef uint8_t _signalquality_type;
  _signalquality_type signalquality;

   typedef uint8_t _numberofsatellites_type;
  _numberofsatellites_type numberofsatellites;

   typedef float _pdop_type;
  _pdop_type pdop;


    enum { NO_FIX = 0u };
     enum { DEAD_RECKONING_ONLY = 1u };
     enum { FIX_2D = 2u };
     enum { FIX_3D = 3u };
     enum { GPS_DEAD_RECKONING_COMBINED = 4u };
     enum { TIME_ONLY_FIX = 5u };
 

  typedef boost::shared_ptr< ::monstertruck_msgs::Gps_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::monstertruck_msgs::Gps_<ContainerAllocator> const> ConstPtr;

}; // struct Gps_

typedef ::monstertruck_msgs::Gps_<std::allocator<void> > Gps;

typedef boost::shared_ptr< ::monstertruck_msgs::Gps > GpsPtr;
typedef boost::shared_ptr< ::monstertruck_msgs::Gps const> GpsConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::monstertruck_msgs::Gps_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::monstertruck_msgs::Gps_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace monstertruck_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'monstertruck_msgs': ['/home/evan/share/coverage_path_ws/src/monstertruck_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::monstertruck_msgs::Gps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::monstertruck_msgs::Gps_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::monstertruck_msgs::Gps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::monstertruck_msgs::Gps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::monstertruck_msgs::Gps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::monstertruck_msgs::Gps_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::monstertruck_msgs::Gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f5e56232ece86600d7d2c2e1299259c";
  }

  static const char* value(const ::monstertruck_msgs::Gps_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f5e56232ece8660ULL;
  static const uint64_t static_value2 = 0x0d7d2c2e1299259cULL;
};

template<class ContainerAllocator>
struct DataType< ::monstertruck_msgs::Gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "monstertruck_msgs/Gps";
  }

  static const char* value(const ::monstertruck_msgs::Gps_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::monstertruck_msgs::Gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float64 utc\n\
float64 latitude\n\
float64 longitude\n\
float32 altitude\n\
float32 v_n\n\
float32 v_e\n\
float32 v_d\n\
float32 truecourse\n\
float32 groundspeed\n\
\n\
uint8 signalquality\n\
uint8 NO_FIX = 0\n\
uint8 DEAD_RECKONING_ONLY = 1\n\
uint8 FIX_2D = 2\n\
uint8 FIX_3D = 3\n\
uint8 GPS_DEAD_RECKONING_COMBINED = 4\n\
uint8 TIME_ONLY_FIX = 5\n\
\n\
uint8 numberofsatellites\n\
float32 pdop\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::monstertruck_msgs::Gps_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::monstertruck_msgs::Gps_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.utc);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.v_n);
      stream.next(m.v_e);
      stream.next(m.v_d);
      stream.next(m.truecourse);
      stream.next(m.groundspeed);
      stream.next(m.signalquality);
      stream.next(m.numberofsatellites);
      stream.next(m.pdop);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gps_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::monstertruck_msgs::Gps_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::monstertruck_msgs::Gps_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "utc: ";
    Printer<double>::stream(s, indent + "  ", v.utc);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
    s << indent << "v_n: ";
    Printer<float>::stream(s, indent + "  ", v.v_n);
    s << indent << "v_e: ";
    Printer<float>::stream(s, indent + "  ", v.v_e);
    s << indent << "v_d: ";
    Printer<float>::stream(s, indent + "  ", v.v_d);
    s << indent << "truecourse: ";
    Printer<float>::stream(s, indent + "  ", v.truecourse);
    s << indent << "groundspeed: ";
    Printer<float>::stream(s, indent + "  ", v.groundspeed);
    s << indent << "signalquality: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.signalquality);
    s << indent << "numberofsatellites: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.numberofsatellites);
    s << indent << "pdop: ";
    Printer<float>::stream(s, indent + "  ", v.pdop);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MONSTERTRUCK_MSGS_MESSAGE_GPS_H
