// Generated by gencpp from file monstertruck_msgs/PositionFeedback.msg
// DO NOT EDIT!


#ifndef MONSTERTRUCK_MSGS_MESSAGE_POSITIONFEEDBACK_H
#define MONSTERTRUCK_MSGS_MESSAGE_POSITIONFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace monstertruck_msgs
{
template <class ContainerAllocator>
struct PositionFeedback_
{
  typedef PositionFeedback_<ContainerAllocator> Type;

  PositionFeedback_()
    : header()
    , x(0.0)
    , y(0.0)
    , yaw(0.0)
    , varianceX(0.0)
    , varianceY(0.0)
    , varianceYaw(0.0)
    , varianceXY(0.0)
    , varianceXYaw(0.0)
    , varianceYYaw(0.0)  {
    }
  PositionFeedback_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , x(0.0)
    , y(0.0)
    , yaw(0.0)
    , varianceX(0.0)
    , varianceY(0.0)
    , varianceYaw(0.0)
    , varianceXY(0.0)
    , varianceXYaw(0.0)
    , varianceYYaw(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _varianceX_type;
  _varianceX_type varianceX;

   typedef float _varianceY_type;
  _varianceY_type varianceY;

   typedef float _varianceYaw_type;
  _varianceYaw_type varianceYaw;

   typedef float _varianceXY_type;
  _varianceXY_type varianceXY;

   typedef float _varianceXYaw_type;
  _varianceXYaw_type varianceXYaw;

   typedef float _varianceYYaw_type;
  _varianceYYaw_type varianceYYaw;




  typedef boost::shared_ptr< ::monstertruck_msgs::PositionFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::monstertruck_msgs::PositionFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct PositionFeedback_

typedef ::monstertruck_msgs::PositionFeedback_<std::allocator<void> > PositionFeedback;

typedef boost::shared_ptr< ::monstertruck_msgs::PositionFeedback > PositionFeedbackPtr;
typedef boost::shared_ptr< ::monstertruck_msgs::PositionFeedback const> PositionFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::monstertruck_msgs::PositionFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::monstertruck_msgs::PositionFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace monstertruck_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'monstertruck_msgs': ['/home/evan/share/coverage_path_ws/src/monstertruck_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::monstertruck_msgs::PositionFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::monstertruck_msgs::PositionFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::monstertruck_msgs::PositionFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::monstertruck_msgs::PositionFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::monstertruck_msgs::PositionFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::monstertruck_msgs::PositionFeedback_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::monstertruck_msgs::PositionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b421832e703e2cf9d54d09ba6e26172";
  }

  static const char* value(const ::monstertruck_msgs::PositionFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b421832e703e2cfULL;
  static const uint64_t static_value2 = 0x9d54d09ba6e26172ULL;
};

template<class ContainerAllocator>
struct DataType< ::monstertruck_msgs::PositionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "monstertruck_msgs/PositionFeedback";
  }

  static const char* value(const ::monstertruck_msgs::PositionFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::monstertruck_msgs::PositionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float32 x\n\
float32 y\n\
float32 yaw\n\
float32 varianceX\n\
float32 varianceY\n\
float32 varianceYaw\n\
float32 varianceXY\n\
float32 varianceXYaw\n\
float32 varianceYYaw\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::monstertruck_msgs::PositionFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::monstertruck_msgs::PositionFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.yaw);
      stream.next(m.varianceX);
      stream.next(m.varianceY);
      stream.next(m.varianceYaw);
      stream.next(m.varianceXY);
      stream.next(m.varianceXYaw);
      stream.next(m.varianceYYaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PositionFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::monstertruck_msgs::PositionFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::monstertruck_msgs::PositionFeedback_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "varianceX: ";
    Printer<float>::stream(s, indent + "  ", v.varianceX);
    s << indent << "varianceY: ";
    Printer<float>::stream(s, indent + "  ", v.varianceY);
    s << indent << "varianceYaw: ";
    Printer<float>::stream(s, indent + "  ", v.varianceYaw);
    s << indent << "varianceXY: ";
    Printer<float>::stream(s, indent + "  ", v.varianceXY);
    s << indent << "varianceXYaw: ";
    Printer<float>::stream(s, indent + "  ", v.varianceXYaw);
    s << indent << "varianceYYaw: ";
    Printer<float>::stream(s, indent + "  ", v.varianceYYaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MONSTERTRUCK_MSGS_MESSAGE_POSITIONFEEDBACK_H
